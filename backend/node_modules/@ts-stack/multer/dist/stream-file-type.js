import { PassThrough, Transform } from 'node:stream';
import { fileTypeFromStream } from 'file-type';
export class FileType extends Transform {
    #stream;
    #result;
    #transformCalled;
    constructor() {
        super();
        this.#stream = new PassThrough();
        this.#result = fileTypeFromStream(this.#stream).then((value) => {
            this.#stream = null;
            return value || null;
        }, (err) => {
            this.#stream = null;
            return null;
        });
    }
    fileTypePromise() {
        return this.#result;
    }
    _transform(chunk, _, cb) {
        this.#transformCalled = true;
        if (this.#stream != null) {
            this.#stream.write(chunk);
        }
        cb(null, chunk);
    }
    _flush(cb) {
        if (this.#transformCalled) {
            this.#result.finally(() => this.finish(cb));
        }
        else {
            this.finish(cb);
        }
    }
    finish(cb) {
        cb(null);
        this.#stream?.end();
    }
}
//# sourceMappingURL=stream-file-type.js.map