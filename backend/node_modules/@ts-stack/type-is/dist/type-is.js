/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */
import contentType from 'content-type';
import mime from 'mime-types';
export function is(actual_, acceptable) {
    // remove parameters and normalize
    const actual = tryNormalizeType(actual_);
    // no type or invalid
    if (!actual) {
        return false;
    }
    // support flattened arguments
    if (!Array.isArray(acceptable)) {
        acceptable = new Array(arguments.length - 1);
        for (let i = 0; i < acceptable.length; i++) {
            // eslint-disable-next-line prefer-rest-params
            acceptable[i] = arguments[i + 1];
        }
    }
    // no types, return the content type
    if (!acceptable || !acceptable.length) {
        return actual;
    }
    let type;
    for (let i = 0; i < acceptable.length; i++) {
        const normalized = normalize((type = acceptable[i])) ?? false;
        if (mimeMatch(normalized, actual)) {
            return type[0] === '+' || type.indexOf('*') !== -1 ? actual : type;
        }
    }
    // no matches
    return false;
}
/**
 * Check if a request has a request body.
 * A request with a body __must__ either have `transfer-encoding`
 * or `content-length` headers set.
 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
 */
export function hasBody(headers) {
    return headers['transfer-encoding'] !== undefined || !isNaN(headers['content-length']);
}
export function typeIs(headers, acceptable) {
    // no body
    if (!hasBody(headers)) {
        return null;
    }
    // support flattened arguments
    if (!Array.isArray(acceptable)) {
        acceptable = new Array(arguments.length - 1);
        for (let i = 0; i < acceptable.length; i++) {
            // eslint-disable-next-line prefer-rest-params
            acceptable[i] = arguments[i + 1];
        }
    }
    // request content type
    const value = headers['content-type'];
    return is(value, acceptable);
}
/**
 * Normalize a mime type.
 * If it's a shorthand, expand it to a valid mime type.
 *
 * In general, you probably want:
```ts
const type = is(headers, ['urlencoded', 'json', 'multipart']);
```
 * Then use the appropriate body parsers.
 * These three are the most common request body types
 * and are thus ensured to work.
 */
export function normalize(type) {
    if (typeof type !== 'string') {
        // invalid type
        return false;
    }
    switch (type) {
        case 'urlencoded':
            return 'application/x-www-form-urlencoded';
        case 'multipart':
            return 'multipart/*';
    }
    if (type[0] === '+') {
        // "+json" -> "*/*+json" expando
        return '*/*' + type;
    }
    return type.indexOf('/') === -1 ? mime.lookup(type) : type;
}
/**
 * Check if `expected` mime type
 * matches `actual` mime type with
 * wildcard and +suffix support.
 */
export function mimeMatch(expected, actual) {
    // invalid type
    if (expected === false) {
        return false;
    }
    // split types
    const actualParts = actual.split('/');
    const expectedParts = expected.split('/');
    // invalid format
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
        return false;
    }
    // validate type
    if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
        return false;
    }
    // validate suffix wildcard
    if (expectedParts[1].slice(0, 2) === '*+') {
        return (expectedParts[1].length <= actualParts[1].length + 1 &&
            expectedParts[1].slice(1) === actualParts[1].slice(1 - expectedParts[1].length));
    }
    // validate subtype
    if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
        return false;
    }
    return true;
}
/**
 * Normalize a type and remove parameters.
 */
function normalizeType(value) {
    // parse the type
    const type = contentType.parse(value);
    // remove the parameters
    type.parameters = {};
    // reformat it
    return contentType.format(type);
}
/**
 * Try to normalize a type and remove parameters.
 */
function tryNormalizeType(value) {
    if (!value) {
        return null;
    }
    try {
        return normalizeType(value);
    }
    catch (err) {
        return null;
    }
}
//# sourceMappingURL=type-is.js.map